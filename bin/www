import app from '../src/app';
import fs from 'fs';
import http from 'http';
import debug from 'debug';

//引入配置文件
const {logConfig, port: portConfig} = require('../src/config');

console.log('process.env.NODE_ENV=' + process.env.NODE_ENV);

/**
 * 确定目录是否存在，如果不存在则创建目录
 */
const confirmPath = (pathStr) => {
  // eslint-disable-next-line no-sync
  if (!fs.existsSync(pathStr)) {
    // eslint-disable-next-line no-sync
    fs.mkdirSync(pathStr);
    console.log('createPath: ' + pathStr);
  }
};

/**
 * 初始化log相关目录
 */
const initLogPath = () => {
  //创建log的根目录'logs'
  if (logConfig.baseLogPath) {
    confirmPath(logConfig.baseLogPath);
    //根据不同的logType创建不同的文件目录
    for (let i = 0, len = logConfig.appenders.length; i < len; i++) {
      if (logConfig.appenders[i].path) {
        confirmPath(logConfig.baseLogPath + logConfig.appenders[i].path);
      }
    }
  }
};

initLogPath();

const normalizePort = (val) => {
  const port = parseInt(val, 10);

  return isNaN(port) ? val : port >= 0 ? port : isNaN(port);
};
const port = normalizePort(portConfig || '3000');

const server = http.createServer(app.callback());

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
  case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
  default:
    throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;

  debug('demo:server')('Listening on ' + bind);
}
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


